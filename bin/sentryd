#!/usr/bin/env ruby

require 'logger'
require_relative '../lib/jsonserver'
require_relative "../lib/gpio"

$DEBUG = true

module SentryConfig
  module_eval File.read(File.join(File.dirname($0), "..", "etc", "config"))
end

class SentryServer
  def initialize(json_server)
    @json_server = json_server
    @log = @json_server.log
    @lock = GPIO.new(SentryConfig::GPIO::LOCK, :low),
    @unlock = GPIO.new(SentryConfig::GPIO::UNLOCK, :low),
    @locked = GPIO.new(SentryConfig::GPIO::LOCKED, :in, :both),
    @unlocked = GPIO.new(SentryConfig::GPIO::UNLOCKED, :in, :both),
    @door = GPIO.new(SentryConfig::GPIO::DOOR, :in, :both)
    @subscribers = []
    @mutex = Mutex.new
  end
  def run()
    threads = []
    threads << Thread.new { self.monitor }
    threads << Thread.new { self.get_clients }
    threads.each { |thr| thr.join }
  end
  def subscribe(client)
    @mutex.synchronize { @subscribers << client }
  end
  def unsubscribe(client)
    @mutex.synchronize { @subscribers.delete client }
  end
  def get_clients()
    @json_server.run do |json_client|
      Thread.new { SentryClient.new(self, json_client).run }
    end
  end
  def monitor()
    poller = GPIOPoller.new([@door, @locked, @unlocked])
    poller.run() do |gpio|
      value = gpio.value
      type = nil
      case gpio
      when @door
        type = :door
      when @locked
        type = :locked
      when @unlocked
        type = :unlocked
      end
      @mutex.synchronize { @subscribers.each { |c| c.send({type => value}) } }
    end
  end
end

class SentryClient
  def initialize(server, json_client)
    @server = server
    @json_client = json_client
  end
  def run()
    @server.subscribe self
    @json_client.receive do |msg|
      STDERR.puts msg
    end
    @server.unsubscribe self
  end
  def send(msg)
    @json_client.send msg
  end
end

KEYS = JSONServerClientRegistry.new(SentryConfig::Daemon::REGISTRY)
LOG = Logger.new(STDERR)
LOG.level = Logger::DEBUG

json_server = JSONServer.new(UNIXServer.new(SentryConfig::Daemon::SOCKET), KEYS, LOG)
File.chown(SentryConfig::Daemon::UID, SentryConfig::Daemon::GID, SentryConfig::Daemon::SOCKET)
File.chmod(SentryConfig::Daemon::SOCKET_MODE, SentryConfig::Daemon::SOCKET)
sentry_server = SentryServer.new(json_server)
sentry_server.run
