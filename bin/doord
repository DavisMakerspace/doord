#!/usr/bin/env ruby

require 'logger'
require 'socket'
require 'etc'
require 'fileutils'
require_relative '../lib/door'
require_relative '../lib/doord'
if !ENV['DOORD_FAKEGPIO']
  require_relative '../opt/gpio/gpio'
else
  require_relative '../opt/gpio/fakegpio'
  GPIO = FakeGPIO
end

module DoorDConfig
  module_eval File.read "#{File.dirname __FILE__}/../etc/doord.conf"
end

GPIOS = [:LOCK,:UNLOCK,:LOCKED,:UNLOCKED,:OPENED].map{|n|GPIO.new(DoorDConfig::GPIO.const_get(n))}

case ARGV[0]
  when "export"
    GPIOS.each do |gpio|
      gpio.export if !gpio.exported?
      if !ENV['DOORD_FAKEGPIO']
        uid = Etc.getpwnam(DoorDConfig::General::UID).uid
        gid = Etc.getgrnam(DoorDConfig::General::GID).gid
        gpio.chown uid, gid
        gpio.chmod DoorDConfig::General::MODE
      end
    end
    FileUtils.mkdir_p File.dirname DoorDConfig::General::DOOR_SOCKET
  when "run"
    begin
      door = Door.new *GPIOS
      server = UNIXServer.new DoorDConfig::General::DOOR_SOCKET
      File.chmod DoorDConfig::General::MODE, DoorDConfig::General::DOOR_SOCKET
      log = Logger.new DoorDConfig::General::LOG
      log.level = DoorDConfig::General::LOG_LEVEL
      DoorD.new(door, server, log).run
    ensure
      File.unlink DoorDConfig::General::DOOR_SOCKET if server
    end
  when "unexport"
    GPIOS.each{|gpio| gpio.unexport if gpio.exported?}
  else
    puts "Usage: #{$0} < export | run | unexport >"
    exit 1
end
