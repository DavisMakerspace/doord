#!/usr/bin/env ruby

require 'logger'
require_relative 'gpio/fakegpio'

module DoorDConfig
  module_eval File.read "#{File.dirname __FILE__}/doord.conf"
end

gpios = [:lock,:unlock,:locked,:unlocked,:opened].map{|n|[n,FakeGPIO.new(DoorDConfig::GPIO.const_get(n.upcase))]}.to_h

gpios[:lock].set_edge_both
gpios[:unlock].set_edge_both
gpios[:locked].set_high
gpios[:unlocked].set_low
gpios[:opened].set_low

loop do
  gpios[:lock].low?
  gpios[:unlock].low?
  signals = FakeGPIO.select([gpios[:lock],gpios[:unlock]], timeout:DoorDConfig::Simulator::OPEN_TOGGLE_DELAY)
  if signals
    signals.each do |signal|
      case signal
        when gpios[:lock]
          puts 'Got lock signal'
          DoorDConfig::Simulator::BOUNCE_COUNT.times do
            gpios[:unlocked].set_low
            sleep DoorDConfig::Simulator::BOUNCE_DUR/(DoorDConfig::Simulator::BOUNCE_COUNT*2.0)
            gpios[:locked].set_high
            sleep DoorDConfig::Simulator::BOUNCE_DUR/(DoorDConfig::Simulator::BOUNCE_COUNT*2.0)
          end
        when gpios[:unlock]
          puts 'Got unlock signal'
          DoorDConfig::Simulator::BOUNCE_COUNT.times do
            gpios[:locked].set_low
            sleep DoorDConfig::Simulator::BOUNCE_DUR/(DoorDConfig::Simulator::BOUNCE_COUNT*2.0)
            gpios[:unlocked].set_high
            sleep DoorDConfig::Simulator::BOUNCE_DUR/(DoorDConfig::Simulator::BOUNCE_COUNT*2.0)
          end
      end
    end
  else
    gpios[:opened].set_high !gpios[:opened].high?
    puts "Set door to #{gpios[:opened].high? ? "opened" : "closed"}"
  end
end
