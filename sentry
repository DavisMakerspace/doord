#!/usr/bin/env ruby

GPIO_LOCK = 31
GPIO_UNLOCK = 30

GPIO_LOCKED = 48
GPIO_UNLOCKED = 60
GPIO_DOOR = 51

###

GPIO = "/sys/class/gpio"
GPIO_INFO = {
  :lock => {:id => GPIO_LOCK, :direction => :low},
  :unlock => {:id => GPIO_UNLOCK, :direction => :low},
  :locked => {:id => GPIO_LOCKED, :direction => :in},
  :unlocked => {:id => GPIO_UNLOCKED, :direction => :in},
  :door => {:id => GPIO_DOOR, :direction => :in}
}
cmd = ARGV.shift
cmd = cmd.to_sym if cmd

def gpio_path(file, name)
  return "#{GPIO}/gpio#{GPIO_INFO[name][:id]}/#{file}"
end

def gpio_set(name)
  File.write(gpio_path(:value, name), "1")
  STDERR.puts "set #{name} signal"
end

def gpio_reset(name)
  File.write(gpio_path(:value, name), "0")
  STDERR.puts "reset #{name} signal"
end

def gpio_trigger(name)
  default = trap(:EXIT) { gpio_reset(name) }
  gpio_set(name)
  sleep 1
  trap(:EXIT, default)
  gpio_reset(name)
end

case cmd
when :init
  GPIO_INFO.each do |name, info|
    File.write("#{GPIO}/export", info[:id])
    File.write(gpio_path(:direction, name), info[:direction])
    value_file = File.new(gpio_path(:value, name))
    value_file.chown(Process::UID.from_name("sentry"), Process::GID.from_name("sentry"))
    if info[:direction] == :in
      value_file.chmod(0440)
      File.write(gpio_path(:edge, name), "both")
    else
      value_file.chmod(0660)
    end
  end
  STDERR.puts "initialized"
when :uninit
  GPIO_INFO.each do |name, info|
    File.write("#{GPIO}/unexport", info[:id])
  end
  STDERR.puts "uninitialized"
when :lock, :unlock
  gpio_trigger cmd
when :locked, :unlocked, :door
  puts File.read(gpio_path(:value, cmd))
when :watch
  locked = File.new(gpio_path(:value, :locked))
  unlocked = File.new(gpio_path(:value, :unlocked))
  door = File.new(gpio_path(:value, :door))
  while true
    r,w,ready = IO.select(nil, nil, [locked, unlocked, door])
    break if ready.empty?
    ready.each do |file|
      case file
      when locked
        puts "#{Time.now}  locked   = #{locked.read(1)}"
        locked.rewind
      when unlocked
        puts "#{Time.now}  unlocked = #{unlocked.read(1)}"
        unlocked.rewind
      when door
        puts "#{Time.now}  door     = #{door.read(1)}"
        door.rewind
      end
    end
  end
else
  STDERR.puts "usage: #{File.basename $0} <command>"
  STDERR.puts "  init     Initialize sentry functionality (must be root)"
  STDERR.puts "  uninit   Uninitialize sentry functionality (must be root)"
  STDERR.puts "  lock     Lock the deadbolt"
  STDERR.puts "  unlock   Unlock the deadbolt"
  STDERR.puts "  locked   Is the deadbolt locked? (0|1)"
  STDERR.puts "  unlocked Is the deadbolt unlocked? (0|1)"
  STDERR.puts "  door     Is the door open? (0|1)"
  STDERR.puts "  watch    Watch status signals for lock, unlock, and door"
  exit 2
end
