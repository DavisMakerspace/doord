#!/usr/bin/env ruby

require_relative '../lib/hashable'

require 'minitest/spec'
require 'minitest/autorun'

$DEBUG = true

class InnerClass
  include Hashable
  attr_accessor :attr
  def ==(other)
    attr == other.attr
  end
end
class OuterClass
  include Hashable
  attr_accessor :attr1, :attr2
  attr_reader :inner
  def initialize()
    @inner = InnerClass.new
  end
  def ==(other)
    [attr1, attr2, inner] == [other.attr1, other.attr2, other.inner]
  end
end

module Namespaced
  class InnerClass
    include Hashable
    attr_accessor :attr2
    def ==(other)
      attr2 == other.attr2
    end
  end
  class OuterClass
    include Hashable
    attr_accessor :attr3, :attr4
    attr_reader :inner
    def initialize()
      @inner = InnerClass.new
    end
    def ==(other)
      [attr3, attr4, inner] == [other.attr3, other.attr4, other.inner]
    end
  end
end

describe Hashable do
  before do
    @obj = OuterClass.new
    @obj.attr1 = "value 1"
    @obj.attr2 = 2
    @obj.inner.attr = "inner_value"
    @hash = {class: "OuterClass", attr1: "value 1", attr2: 2, inner: {class: "InnerClass", attr: "inner_value"}}
    @hash_dash = {class: "outer-class", attr1: "value 1", attr2: 2, inner: {class: "inner-class", attr: "inner_value"}}
    @obj2 = Namespaced::OuterClass.new
    @obj2.attr3 = "value 3"
    @obj2.attr4 = 4
    @obj2.inner.attr2 = "inner_value_namespaced"
    @hash2 = {class: "OuterClass", attr3: "value 3", attr4: 4, inner: {class: "InnerClass", attr2: "inner_value_namespaced"}}
    @hash2_ns = {class: "Namespaced::OuterClass", attr3: "value 3", attr4: 4, inner: {class: "Namespaced::InnerClass", attr2: "inner_value_namespaced"}}
    @hash2_dash = {class: "outer-class", attr3: "value 3", attr4: 4, inner: {class: "inner-class", attr2: "inner_value_namespaced"}}
    @hash2_dash_ns = {class: "namespaced_outer-class", attr3: "value 3", attr4: 4, inner: {class: "namespaced_inner-class", attr2: "inner_value_namespaced"}}
  end

  it "can make a hash" do
    @obj.to_hash.must_equal @hash
  end

  it "can make a dashified hash" do
    @obj.to_hash(dashify:true).must_equal @hash_dash
  end

  it "can be made from a hash" do
    @hash.from_hash.must_equal @obj
  end

  it "can be made from a dashified hash" do
    @hash_dash.from_hash.must_equal @obj
  end

  it "can make a namespaced hash" do
    @obj2.to_hash.must_equal @hash2_ns
  end

  it "can be made from a namespaced hash" do
    @hash2_ns.from_hash.must_equal @obj2
  end

  it "can make a hash in a namespace" do
    @obj2.to_hash(namespace: ['Namespaced']).must_equal @hash2
  end

  it "can be made from a hash in a namespace" do
    @hash2.from_hash(namespace: ['Namespaced']).must_equal @obj2
  end

  it "can make a dashified hash in a namespace" do
    @obj2.to_hash(dashify:true).must_equal @hash2_dash_ns
  end

  it "can be made from a dashified hash in a namespace" do
    @hash2_dash_ns.from_hash.must_equal @obj2
  end
end
