#!/usr/bin/env ruby

$VERBOSE = true

require '/usr/lib/sentry/secretstore'

require 'minitest/spec'
require 'minitest/autorun'
require 'tempfile'

describe SecretStore do
  before do
    @tempfile = Tempfile.new('secret.store')
    @id = [
      {id: 'id1', secret: 'my secret'},
      {id: 'idTwo', secret: 'Another Section'},
      {id: 'id-the-third', secret: 'nobody knows'}
    ]
  end
  after do
    @tempfile.unlink
  end
  def ss
    STDERR.puts File.read(@tempfile.path) if $VERBOSE
    return SecretStore.new @tempfile.path
  end
  it "can add" do
    @id.each { |entry| ss.add(entry[:id]).must_equal true }
    @id.each { |entry| ss.exists?(entry[:id]).must_equal true }
    @id.each { |entry| ss.exists?(entry[:id].swapcase).must_equal false }
  end
  it "can remove" do
    @id.each { |entry| ss.add(entry[:id]).must_equal true }
    @id.each { |entry| ss.set(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.remove(entry[:id]).must_equal true }
    @id.each { |entry| ss.exists?(entry[:id]).must_equal false }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
  end
  it "can set secret" do
    @id.each { |entry| ss.add(entry[:id]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
    @id.each { |entry| ss.set(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.set(entry[:id], entry[:secret].swapcase).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret].swapcase).must_equal true }
  end
  it "can disable and undisable" do
    @id.each { |entry| ss.add(entry[:id]).must_equal true }
    @id.each { |entry| ss.set(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.disabled?(entry[:id]).must_equal false }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.disable(entry[:id]).must_equal true }
    @id.each { |entry| ss.disabled?(entry[:id]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
    @id.each { |entry| ss.undisable(entry[:id]).must_equal true }
    @id.each { |entry| ss.disabled?(entry[:id]).must_equal false }
    @id.each { |entry| ss.set(entry[:id], entry[:secret]).must_equal true }
  end
  it "can auth" do
    @id.each { |entry| ss.add(entry[:id]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
    @id.each { |entry| ss.set(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret].swapcase).must_equal false }
  end
end
