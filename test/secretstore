#!/usr/bin/env ruby

$VERBOSE=2

require_relative '../lib/secretstore'

require 'minitest/spec'
require 'minitest/autorun'
require 'tempfile'

describe SecretStore do
  before do
    @tempfile = Tempfile.new('secret.store')
    @id = [
      {id: 'id1', secret: 'my secret', data: 'some data'},
      {id: 'idTwo', secret: 'another section', data: 'other data'},
      {id: 'id-the-third', secret: 'nobody knows', data: {more: 'complex', data: 42}}
    ]
  end
  after do
    @tempfile.unlink
  end
  it "exists" do
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.create(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.exists?(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.exists?(entry[:id].swapcase).must_equal false }
  end
  it "can auth" do
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.create(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret].swapcase).must_equal false }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
  end
  it "can reset" do
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.create(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.reset(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret].swapcase).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.auth?(entry[:id], entry[:secret]).must_equal false }
  end
  it "can attach and view data" do
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.create(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.attach entry[:id], entry[:data] }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.view(entry[:id]).must_equal entry[:data] }
  end
  it "deletes" do
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.create(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.delete(entry[:id]).must_equal true }
    ss = SecretStore.new @tempfile.path
    @id.each { |entry| ss.exists?(entry[:id]).must_equal false }
  end
end
