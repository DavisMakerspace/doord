#!/usr/bin/env ruby

require_relative '../lib/tokenregistry'

require 'minitest/spec'
require 'minitest/autorun'

describe TokenRegistry do
  before do
    @path = '/tmp/token.store'
    File::delete(@path) if File::exists? @path
    @token_data = [
      {token: 'thisisatoken', data: 'some data'},
      {token: 'anothertoken', data: 'some more data'}]
  end
  after do
    File::delete(@path) if File::exists? @path
  end
  it "can store and get back data" do
    tr1 = TokenRegistry.new @path
    tr1.add @token_data[0][:token], @token_data[0][:data]
    tr1.add @token_data[1][:token], @token_data[1][:data]
    tr2 = TokenRegistry.new @path
    tr2.get(@token_data[0][:token]).must_equal @token_data[0][:data]
    tr2.get(@token_data[1][:token]).must_equal @token_data[1][:data]
  end
  it "can store same token with same data" do
    tr1 = TokenRegistry.new @path
    tr1.add @token_data[0][:token], @token_data[0][:data]
    tr2 = TokenRegistry.new @path
    tr2.add @token_data[0][:token], @token_data[0][:data]
    tr3 = TokenRegistry.new @path
    tr3.get(@token_data[0][:token]).must_equal @token_data[0][:data]
  end
  it "cannot store same token with different data" do
    tr1 = TokenRegistry.new @path
    tr1.add @token_data[0][:token], @token_data[0][:data]
    tr2 = TokenRegistry.new @path
    assert_raises TokenRegistryDuplicateError do
      tr2.add @token_data[0][:token], @token_data[1][:data]
    end
  end
end
